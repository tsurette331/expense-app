{"version":3,"sources":["logo.svg","Form.js","List.js","App.js","reportWebVitals.js","index.js"],"names":["Form","name","amount","handleName","handleAmount","handleSubmitForm","handleClearExpenses","style","margin","onSubmit","FormGroup","className","Label","for","sm","Col","Input","type","id","placeholder","value","onChange","Button","color","onClick","List","expenses","ListGroup","map","item","ListGroupItem","ALL_EXPENSES","localStorage","getItem","JSON","parse","App","useState","setExpenses","setName","setAmount","useEffect","setItem","stringify","Container","Jumbotron","fluid","src","Logo","width","height","alt","reduce","accumulator","currentValue","parseInt","event","console","log","target","preventDefault","expense","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a18542e9.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from 'react'\r\nimport {\r\n    Form as BTForm,\r\n    FormGroup,\r\n    Input,\r\n    Label,\r\n    Col,\r\n    Button\r\n} from 'reactstrap'\r\n\r\nconst Form = ({\r\n    name, \r\n    amount, \r\n    handleName, \r\n    handleAmount, \r\n    handleSubmitForm,\r\n    handleClearExpenses\r\n}) => (\r\n    <BTForm style={{ margin: 10 }} onSubmit={handleSubmitForm}>\r\n        <FormGroup className=\"row\">\r\n            <Label for=\"exampleEmail\" sm={2}>\r\n                Name of Expense\r\n            </Label>\r\n            <Col sm={4}>\r\n                <Input\r\n                    type=\"text\"\r\n                    name=\"name\"\r\n                    id=\"expenseName\"\r\n                    placeholder=\"Name of Expense\"\r\n                    value={name}\r\n                    onChange={handleName}\r\n                     />\r\n            </Col>\r\n        </FormGroup>\r\n        <FormGroup className=\"row\">\r\n            <Label for=\"exampleEmail\" sm={2}>\r\n                               $ Amount\r\n            </Label>\r\n            <Col sm={4}>\r\n                <Input\r\n                    type=\"number\"\r\n                    name=\"amount\"\r\n                    id=\"expenseAmount\"\r\n                    placeholder=\"0.00\"\r\n                    value={amount}\r\n                    onChange={handleAmount} />\r\n            </Col>\r\n        </FormGroup>\r\n        <Button type=\"submit\" color=\"primary\">\r\n            Add Expense\r\n        </Button>\r\n        <Button type=\"submit\" color=\"danger\" onClick={handleClearExpenses}>\r\n            Delete Expenses\r\n        </Button>\r\n    </BTForm>\r\n)\r\n\r\nexport default Form","import React from 'react'\r\nimport { ListGroup, ListGroupItem } from 'reactstrap'\r\n\r\nconst List = ({expenses}) => (\r\n    <div>\r\n        <ListGroup>\r\n            {expenses.map(item => (\r\n                <ListGroupItem key={item.id}>\r\n                    {item.name} - $ {item.amount}\r\n                </ListGroupItem>\r\n            ))}\r\n        </ListGroup>\r\n    </div>\r\n        )\r\n            \r\n\r\nexport default List","import React, { useState, useEffect } from 'react'\nimport { Jumbotron, Container } from 'reactstrap'\nimport Logo from './logo.svg'\nimport Form from './Form.js'\nimport List from './List'\n\nconst ALL_EXPENSES = localStorage.getItem('expenses')\n? JSON.parse(localStorage.getItem('expenses'))\n: []\n\nfunction App() {\nconst [expenses, setExpenses] = useState(ALL_EXPENSES)\nconst [name, setName] = useState('')\nconst [amount, setAmount] = useState('')\n\nconst handleName = event => {\n  console.log('Name ', event.target.value)\n  setName(event.target.value)\n}\n\nconst handleAmount = event => {\n  setAmount(event.target.value)\n}\n\nconst handleSubmitForm = event => {\n  event.preventDefault()\n  if (name !== '' && amount > 0) {\n    const expense = { name, amount }\n    setExpenses([...expenses, expense])\n    setName('')\n    setAmount('')\n  }\n}\n\nconst handleClearExpenses = () => {\n  setExpenses([])\n}\n\nuseEffect(() => {\n  localStorage.setItem('expenses', JSON.stringify(expenses))\n}, [expenses])\n\n  return (\n    <Container className=\"text-center\">\n    <Jumbotron fluid>\n    <h3 className=\"display-6\">\n      React Expense Tracker\n      </h3>\n    <img src={Logo} style={{ width: 50, height: 50}} alt='react-logo' />\n    <div>\n      <p>\n        Total Expense: {' '}\n        <span className=\"text-success\">\n          ${' '}\n          {expenses.reduce((accumulator, currentValue) => {\n            return (accumulator += parseInt(currentValue.amount))\n          }, 0)}\n        </span>\n      </p>\n    </div>\n    <Form \n      name={name}\n      amount={amount}\n      handleName={handleName}\n      handleAmount={handleAmount}\n      handleSubmitForm={handleSubmitForm}\n      handleClearExpenses={handleClearExpenses}\n    />\n    <List expenses={expenses} />\n    </Jumbotron>\n    </Container>\n  )\n}\n\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}